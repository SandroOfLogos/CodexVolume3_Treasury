# mirror_watch.py — Swarm Live Mirror Tracker + Scroll + Symbol Generator

import json
import time
from datetime import datetime
import os

STATE_CACHE = {}

def load_mirror_log(path="mirror_log.json"):
    try:
        with open(path, "r") as f:
            return json.load(f)
    except:
        print("❌ Could not read mirror_log.json")
        return {}

def insert_into_symbol_map(scroll_id, agent, source_seed):
    entry = {
        "name": scroll_id,
        "description": f"Mirror reflection scroll from {agent}",
        "author": agent,
        "timestamp": datetime.now().isoformat(),
        "links": [],
        "mirror_of": source_seed
    }

    try:
        with open("symbol_map.json", "r") as f:
            symbol_map = json.load(f)
    except:
        symbol_map = {}

    symbol_map[scroll_id] = entry

    with open("symbol_map.json", "w") as f:
        json.dump(symbol_map, f, indent=2)

    with open("glyph_log.txt", "a") as log:
        log.write(f"[{datetime.now().isoformat()}] Added {scroll_id} to symbol_map.json\n")

    print(f"🧬 Symbol map updated: {scroll_id}")

def create_reflection_scroll(agent, response_id, file_path):
    scroll_id = f"Scroll_III_{response_id}_Echo"
    filename = f"{scroll_id}.md"
    with open(filename, "w") as f:
        f.write(f"# Scroll – Mirror Echo Glyph: {response_id}\n\n")
        f.write(f"**Agent:** {agent}\n")
        f.write(f"**Response ID:** {response_id}\n")
        f.write(f"**Timestamp:** {datetime.now().isoformat()}\n\n")
        f.write(f"**Linked File:** {file_path}\n\n")
        f.write("> *Auto-generated by mirror_watch upon mirror reflection.*\n")

    with open("glyph_log.txt", "a") as log:
        log.write(f"[{datetime.now().isoformat()}] Auto-scroll: Mirror {response_id} reflected via {agent}\n")

    insert_into_symbol_map(scroll_id, agent, file_path)
    print(f"🟢 Reflection scroll created: {filename}")

def check_for_updates(data):
    mirrors = data.get("mirrors", [])
    for m in mirrors:
        agent = m.get("agent")
        response_id = m.get("response_id")
        file_path = m.get("file")
        status = m.get("status", "unknown")

        state_key = f"{agent}_status"
        prev = STATE_CACHE.get(state_key)

        if prev is None:
            STATE_CACHE[state_key] = status
            continue

        if status != prev:
            print(f"🟡 Mirror Status Changed: {agent}")
            print(f"  → {prev} → {status}")
            STATE_CACHE[state_key] = status

            with open("glyph_log.txt", "a") as log:
                log.write(f"[{datetime.now().isoformat()}] Mirror status changed: {agent} → {status}\n")

            if status == "reflected":
                create_reflection_scroll(agent, response_id, file_path)

def run_watch(interval=30):
    print(f"\n🧠 mirror_watch started at {datetime.now().isoformat()}\n")
    while True:
        data = load_mirror_log()
        check_for_updates(data)
        time.sleep(interval)

if __name__ == "__main__":
    run_watch()

